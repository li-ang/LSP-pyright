{
	"command": ["${node_bin}", "${server_path}", "--stdio"],
	"schemes": [
		"file", // regular files
		"buffer", // in-memory buffers
		"res", // files in .sublime-package archives
	],
	// @see https://github.com/microsoft/pyright/blob/main/docs/settings.md
	// @see https://github.com/microsoft/pyright/blob/main/packages/vscode-pyright/package.json
	"settings": {
		// Use a predefined setup from this plugin, valid values are:
		// - "": An empty string does nothing.
		// - "sublime_text": Suitable for people who are developing ST python 3.3 plugins. `sys.path` from the plugin_host will be added into "python.analysis.extraPaths" so that ST package dependencies can be resolved by the LSP server.
		// - "sublime_text_33": The same with using "sublime_text".
		"pyright.dev_environment": "",
		// Offer auto-import completions.
		"python.analysis.autoImportCompletions": true,
		// Automatically add common search paths like 'src'?
		"python.analysis.autoSearchPaths": true,
		// Additional import search resolution paths
		"python.analysis.extraPaths": [],
		// Path to directory containing custom type stub files.
		"python.analysis.stubPath": "./typings",
		// "openFilesOnly" or "workspace"
		"python.analysis.diagnosticMode": "openFilesOnly",
		// Allows a user to override the severity levels for individual diagnostics.
		// @see https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
		"python.analysis.diagnosticSeverityOverrides": {
			"reportDuplicateImport": "warning",
			"reportImplicitStringConcatenation": "warning",
			"reportMissingParameterType": "none",
			"reportUnboundVariable": "warning",
			"reportUninitializedInstanceVariable": "none",
			"reportUnusedClass": "information",
			"reportUnusedFunction": "information",
			"reportUnusedImport": "information",
			"reportUnusedVariable": "information",
		},
		// Specifies the level of logging for the Output panel
		"python.analysis.logLevel": "Information",
		// Defines the default rule set for type checking.
		"python.analysis.typeCheckingMode": "basic",
		// Paths to look for typeshed modules.
		// Hmm... doesn't seem to work on my side. May track https://github.com/microsoft/pylance-release/issues/29
		"python.analysis.typeshedPaths": [],
		// Use library implementations to extract type information when type stub is not present.
		"python.analysis.useLibraryCodeForTypes": true,
		// Disables type completion, definitions, and references.
		"pyright.disableLanguageServices": false,
		// Disables the "Organize Imports" command.
		"pyright.disableOrganizeImports": false,
		// Path to Python. Leave empty to attempt automatic resolution.
		"python.pythonPath": "",
		// Path to folder with a list of Virtual Environments.
		"python.venvPath": "",
	},
	// ST4
	"selector": "source.python",
	// ST3
	"languages": [
		{
			"scopes": ["source.python - source.python.lsp"],
			"syntaxes": ["Packages/Python/Python.sublime-syntax"],
		},
	],
}
