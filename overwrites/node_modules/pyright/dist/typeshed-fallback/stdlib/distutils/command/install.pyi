"""
distutils.command.install

Implements the Distutils 'install' command.
"""

from collections.abc import Callable
from typing import Any, ClassVar

from ..cmd import Command

HAS_USER_SITE: bool
SCHEME_KEYS: tuple[str, ...]
INSTALL_SCHEMES: dict[str, dict[Any, Any]]

class install(Command):
    description: str
    user_options: Any
    boolean_options: Any
    negative_opt: Any
    prefix: str | None
    exec_prefix: Any
    home: str | None
    user: bool
    install_base: Any
    install_platbase: Any
    root: str | None
    install_purelib: Any
    install_platlib: Any
    install_headers: Any
    install_lib: str | None
    install_scripts: Any
    install_data: Any
    install_userbase: Any
    install_usersite: Any
    compile: Any
    optimize: Any
    extra_path: Any
    install_path_file: int
    force: int
    skip_build: int
    warn_dir: int
    build_base: Any
    build_lib: Any
    record: Any
    def initialize_options(self) -> None:
        """Initializes options."""
        ...
    config_vars: Any
    install_libbase: Any
    def finalize_options(self) -> None:
        """Finalizes options."""
        ...
    def dump_dirs(self, msg) -> None:
        """Dumps the list of user options."""
        ...
    def finalize_unix(self) -> None:
        """Finalizes options for posix platforms."""
        ...
    def finalize_other(self) -> None:
        """Finalizes options for non-posix platforms"""
        ...
    def select_scheme(self, name) -> None:
        """Sets the install directories by applying the install schemes."""
        ...
    def expand_basedirs(self) -> None:
        """
        Calls `os.path.expanduser` on install_base, install_platbase and
        root.
        """
        ...
    def expand_dirs(self) -> None:
        """Calls `os.path.expanduser` on install dirs."""
        ...
    def convert_paths(self, *names) -> None:
        """Call `convert_path` over `names`."""
        ...
    path_file: Any
    extra_dirs: Any
    def handle_extra_path(self) -> None:
        """Set `path_file` and `extra_dirs` using `extra_path`."""
        ...
    def change_roots(self, *names) -> None:
        """Change the install directories pointed by name using root."""
        ...
    def create_home_path(self) -> None:
        """Create directories under ~."""
        ...
    def run(self) -> None:
        """Runs the command."""
        ...
    def create_path_file(self) -> None:
        """Creates the .pth file"""
        ...
    def get_outputs(self):
        """Assembles the outputs of all the sub-commands."""
        ...
    def get_inputs(self):
        """Returns the inputs of all the sub-commands"""
        ...
    def has_lib(self):
        """
        Returns true if the current distribution has any Python
        modules to install.
        """
        ...
    def has_headers(self):
        """
        Returns true if the current distribution has any headers to
        install.
        """
        ...
    def has_scripts(self):
        """
        Returns true if the current distribution has any scripts to.
        install.
        """
        ...
    def has_data(self):
        """
        Returns true if the current distribution has any data to.
        install.
        """
        ...
    # Any to work around variance issues
    sub_commands: ClassVar[list[tuple[str, Callable[[Any], bool] | None]]]
